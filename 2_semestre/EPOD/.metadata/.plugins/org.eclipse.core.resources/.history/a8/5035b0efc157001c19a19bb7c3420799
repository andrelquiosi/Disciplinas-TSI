package trabalhoFinalEDTeste;



import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;

public class Livro {

    private String nome_livro, autor, ano_publicacao;
    private int qte_palavras;
    StringBuilder sbDepoisRemocao;

    public Livro(String livroTXT) throws IOException {
        lerTXT(livroTXT);
    }

    public Livro() {

    }

    private void setNome_livro(String nomeDoLivro) {
        nome_livro = nomeDoLivro;
    }

    private void setAutor(String autorDoLivro) {
        autor = autorDoLivro;
    }

    private void setAno_publicacao(String ano) {
        ano_publicacao = ano;
    }

    public String getNome_livro() {
        return nome_livro;
    }

    public String getAutor() {
        return autor;
    }

    public String getAno_publicacao() {
        return ano_publicacao;
    }

    public int getQte_palavras() {
        return qte_palavras;
    }

    public StringBuilder getSbDepoisRemocao() {
        return sbDepoisRemocao;
    }

    private void lerTXT(String file) throws IOException {

        BufferedReader br = new BufferedReader(new FileReader(file));
        StringBuilder sb = new StringBuilder();
        String linha = br.readLine();

        atributosLivro(linha);// PEGA OS ATRIBUTOS DO LIVRO QUE ESTÃO NA PRIMEIRA LINHA DO TXT

        while (linha != null) {

            sb.append(linha);
            sb.append(System.lineSeparator());
            linha = br.readLine();
        }
        this.sbDepoisRemocao = new StringBuilder();
        sbDepoisRemocao.append(sb.toString().replaceAll("[^a-zA-Z0-9'.]", " ").toLowerCase());

        contaPalavras(sbDepoisRemocao);// CONTA AS PALAVRAS QUE CADA LIVRO TEM
    }

    private void atributosLivro(String linhaAtributos) {

        linhaAtributos = linhaAtributos.replaceAll("[^a-zA-Z0-9, ]", "");
        String[] infoLivro = linhaAtributos.split(",");

        setNome_livro(infoLivro[0]);
        setAutor(infoLivro[1]);
        setAno_publicacao(infoLivro[2]);

    }

    private String contaPalavras(StringBuilder texto) {

        String aux = texto.toString();
        while (aux.contains("  ")) {
            aux = aux.replaceAll("  ", " ");
        }
        this.qte_palavras = aux.split(" ").length;

        return aux;
    }

    public Map<String, String> palavrasDistintas() {

        String[] s = contaPalavras(sbDepoisRemocao).split(" ");

        Map<String, String> mapa = new HashMap<>();

        for (int i = 0; i < s.length; i++) {
            mapa.put(s[i], "");
        }
        return mapa;

    }

    public int palavraIgual(String palavra) {
        String[] s = contaPalavras(sbDepoisRemocao).split(" ");
        int cont = 0;
        for (int i = 0; i < s.length; i++) {
            if (s[i].equalsIgnoreCase(palavra)) {
                cont++;
            }
        }

        return cont;
    }


    public void palavraFrequente() {
        String[] s = contaPalavras(sbDepoisRemocao).split(" ");
        List<String> list = Arrays.asList(s);

        Map<String, Integer> frequente = new HashMap<>();
        for(String word : list){
            Integer times = frequente.get(word);
            if(times == null){
                frequente.put(word,1);
            }else{
                frequente.put(word,times+1);
            }
        }
        List<Map.Entry<String, Integer>> statistics = new ArrayList<>(frequente.entrySet());
        Collections.sort(statistics, new Comparator<Map.Entry<String, Integer>>() {
            public int compare(Map.Entry<String, Integer> o1, Map.Entry<String, Integer> o2) {
                return - o1.getValue().compareTo(o2.getValue());
            }
        });
        List<Map.Entry<String, Integer>> one = statistics.subList(0,1);
        for(Map.Entry<String, Integer> word : one){

            System.out.println("Palavra mais frequente : "+ word.getKey() + " : " + word.getValue() + " vezes");


        }
    }


    @Override
    public String toString() {
        return "Livro: " + nome_livro + ", Autor: " + autor + ", Ano de Publicação: " + ano_publicacao
                + ", Quantidade de Palavras: " + qte_palavras;
    }

    @Override
    public int hashCode() {
        return Objects.hash(sbDepoisRemocao);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Livro other = (Livro) obj;
        return Objects.equals(sbDepoisRemocao, other.sbDepoisRemocao);
    }

}